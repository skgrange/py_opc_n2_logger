#!/usr/bin/python
# -*- coding: utf-8 -*-

'''
A Python programme to log data from an Alphasense OPC-N2 sensor. 

Author Stuart K. Grange 
'''

# Load packages
import usbiss
import opc
import time, datetime, pytz
import csv
from collections import OrderedDict
import py_opc_n2_logger

# Catch progamme's arguments
args = py_opc_n2_logger.catch_arguments()

# Open connection to sensor
print 'Opening the connection to the sensor...'
spi = usbiss.USBISS(args.device, 'spi', spi_mode = 2, freq = 500000)

print 'Initializing the sensor...'
time.sleep(0.5)
sensor = opc.OPCN2(spi)

print 'Sensor response...'
print sensor

print 'Turning the sensor on...'
sensor.on()

# Get serial number
time.sleep(1)
serial_number = sensor.sn().strip()

print 'Getting sensor information...'
print sensor.read_info_string()

# Other commands...
# print sensor.config()
# print sensor.read_firmware()

print 'Waiting for the sensor to be ready...'
time.sleep(1)


# Allocatefor measurement loop
list_results = []

# The measurement loop
while True:
  
  # Start logging at the start of the minute
  if len(list_results) == 0 and py_opc_n2_logger.date_unix(integer = True) % 60 != 0:
	
    # Sleep until start of minute
    py_opc_n2_logger.nice_starter(verbose = True)

  else:
  
    # Do not wait
    pass

  # Interact with sensor, query and get measurements
  dict_bind = py_opc_n2_logger.get_measurements(
    sensor = sensor,
    time_zone = args.time_zone,
    serial_number = serial_number
  )
  
  # Print to console
  print dict_bind.get('date') + ': Sensor queried...'
  
  # Accumulate the measurements
  list_results.extend([dict_bind])
  
  # Aggregation and file writing logic
  if len(list_results) == 12: 
    
    print 'Aggregating data...' 
    df = py_opc_n2_logger.aggregate_measurements(list_results)
    
    print 'Exporting data...' 
    py_opc_n2_logger.write_sensor_data(df, directory = args.output)
    
    # Clear list for next measurement loop
    list_results = []
    
    # Garbage collection
    py_opc_n2_logger.housekeeping()
    
  else: 
    
    pass

  # Sleep for next measurement iteration
  py_opc_n2_logger.nice_waiter(5)

# Shut down the sensor, may not ever be used...
sensor.off()
